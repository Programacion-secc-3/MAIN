
import pygame
from pygame.key import get_pressed
from pygame.locals import *
import sys
import random
from tkinter import filedialog
from tkinter  import *

#inicia pygame
pygame.init()

#Variables para usar dps
vec = pygame.math.Vector2
WIDTH, HEIGHT = 1000, 420
ACC, FRIC = 2.5, -0.3
FPS = 30
FPS_CLOCK = pygame.time.Clock()
COUNT = 0
BOSS1_ST = pygame.mixer.Sound("/Universidad/Programación/GAME/Proyecto JUEGO/Soundtrack/BOSS1.wav")

WALK_ANIMATION_R = [pygame.image.load("/Universidad/Programación/GAME/Proyecto JUEGO/PC's & NPC's/Player character/WALK/RIGHT/WALK1.png"),pygame.image.load("/Universidad/Programación/GAME/Proyecto JUEGO/PC's & NPC's/Player character/WALK/RIGHT/WALK2.png"),
        pygame.image.load("/Universidad/Programación/GAME/Proyecto JUEGO/PC's & NPC's/Player character/WALK/RIGHT/WALK3.png"), pygame.image.load("/Universidad/Programación/GAME/Proyecto JUEGO/PC's & NPC's/Player character/WALK/RIGHT/WALK4.png"),
        pygame.image.load("/Universidad/Programación/GAME/Proyecto JUEGO/PC's & NPC's/Player character/WALK/RIGHT/WALK5.png")]
WALK_ANIMATION_L = [pygame.image.load("/Universidad/Programación/GAME/Proyecto JUEGO/PC's & NPC's/Player character/WALK/LEFT/WALK_1L.png"),pygame.image.load("/Universidad/Programación/GAME/Proyecto JUEGO/PC's & NPC's/Player character/WALK/LEFT/WALK_2L.png"),
        pygame.image.load("/Universidad/Programación/GAME/Proyecto JUEGO/PC's & NPC's/Player character/WALK/LEFT/WALK_3L.png"), pygame.image.load("/Universidad/Programación/GAME/Proyecto JUEGO/PC's & NPC's/Player character/WALK/LEFT/WALK_4L.png"),
        pygame.image.load("/Universidad/Programación/GAME/Proyecto JUEGO/PC's & NPC's/Player character/WALK/LEFT/WALK_5L.png")]

JUMP_ANIMATION = [pygame.image.load("/Universidad/Programación/GAME/Proyecto JUEGO/PC's & NPC's/Player character/JUMP/JUMP00.png"), pygame.image.load("/Universidad/Programación/GAME/Proyecto JUEGO/PC's & NPC's/Player character/JUMP/JUMP01.png")]
displaysurface = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Proyect Andromeda")

#clases del juego
class Background(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.bgimage = pygame.image.load("/Universidad/Programación/GAME/Proyecto JUEGO/Background/BG1.png")
        #self.bgsuelo = pygame.image.load("/Universidad/Programación/GAME/Proyecto JUEGO/Background/GROUNDAREA1.png")
        self.bgY = -1
        self.bgX = 0
    def render(self):
        displaysurface.blit(self.bgimage, (self.bgX, self.bgY))        
        #displaysurface.blit(self.bgsuelo, (self.bgX, self.bgY))

background = Background()

class Ground(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.image.load("/Universidad/Programación/GAME/Proyecto JUEGO/Background/Rectangulo.png")
        self.rect = self.image.get_rect(center = (500 , 420))

    def render(self):
        displaysurface.blit(self.image, (self.rect.x, self.rect.y))
        
ground = Ground()
ground_group = pygame.sprite.Group()
ground_group.add(ground)


class Player(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.image.load("/Universidad/Programación/GAME/Proyecto JUEGO/PC's & NPC's/Player character/GUN/GUN_IDLE1.png")
        self.rect = self.image.get_rect()
        #posicion y dirección
        self.vx = 0
        self.pos = vec((340, 340))
        self.vel = vec(0, 0)
        self.direction = "RIGHT"
        self.jumping = False
        self.running = False
        self.move_frame = 0
        
    def move(self):
        self.acc = vec(0, 0.4)
        if abs(self.vel.x) > 0.3:
            self.running = True
        else:
            self.running = False
        pressed_keys = pygame.key.get_pressed()
        if pressed_keys[K_a]:
            self.acc.x = -ACC
        if pressed_keys[K_d]:
            self.acc.x = ACC
        #FISICA JASJDAJDSAD ME RIO PORQUE NO ENTIENDO
        self.acc.x += self.vel.x * FRIC
        self.vel += self.acc
        self.pos += self.vel + 0.5 * self.acc #ah?

        if self.pos.x > WIDTH:
            self.pos.x = WIDTH
        if 0 > self.pos.x:
            self.pos.x = 0        
        self.rect.midbottom = self.pos
        
    def update(self):
        #Return to base frame if at end of movement sequence 
        if self.move_frame > 4:
            self.move_frame = 0
            return
 
        #Move the character to the next frame if conditions are met 
        if self.jumping == False and self.running == True:  
            if self.vel.x > 0:
                self.image = WALK_ANIMATION_R[self.move_frame]
                self.direction = "RIGHT"
                self.move_frame += 1
            else:
                self.image = WALK_ANIMATION_L[self.move_frame]
                self.direction = "LEFT"
                self.move_frame += 1
 
        #Returns to base frame if standing still and incorrect frame is showing
        if abs(self.vel.x) < 0.2 and self.move_frame != 0:
            self.move_frame = 0
            if self.direction == "RIGHT":
                self.image = WALK_ANIMATION_R[self.move_frame]
            elif self.direction == "LEFT":
                self.image = WALK_ANIMATION_L[self.move_frame]

    def attack(self):
        pass 
    def gravity_check(self):
        hits = pygame.sprite.spritecollide(player ,ground_group, False)
        if self.vel.y > 0:
            if hits:
                lowest = hits[0]
                if self.pos.y < lowest.rect.bottom:
                    self.pos.y = lowest.rect.top + 1
                    self.vel.y = 0
                    self.jumping = False


    def jump(self):
        self.rect.x += 1

        hits = pygame.sprite.spritecollide(self, ground_group, False)

        self.rect.x -= 1

        if hits and not self.jumping:                
            if self.direction == "RIGHT":
                self.image = JUMP_ANIMATION[0]
            elif self.direction == "LEFT":
                self.image = JUMP_ANIMATION[1]
            self.jumping = True 
            self.vel.y = -10
    

player = Player()


class Enemy(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()



while True:
    player.gravity_check()    
    ground.render()
    background.render()
    player.update()
    player.move()
    displaysurface.blit(player.image, player.rect)

    pygame.display.update()
    FPS_CLOCK.tick(FPS)
    pygame.mixer.Sound.play(BOSS1_ST)
    
    for event in pygame.event.get():
        if event.type == QUIT:
            pygame.quit()
            sys.exit()
    
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_w:
                player.jump()



